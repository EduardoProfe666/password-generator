import { PasswordOptions } from "../types";

const LOWERCASE_CHARS = "abcdefghijklmnopqrstuvwxyz";
const UPPERCASE_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const NUMBER_CHARS = "0123456789";
const SYMBOL_CHARS = "!@#$%^&*()_+-=[]{}|;:,.<>?";
const AMBIGUOUS_CHARS = "Il1O0";

// Common English words frequently used in passwords
const ENGLISH_WORDS = [
  "love",
  "star",
  "rock",
  "blue",
  "dragon",
  "red",
  "black",
  "angel",
  "green",
  "heart",
  "baby",
  "white",
  "tiger",
  "cool",
  "pink",
  "wolf",
  "silver",
  "purple",
  "shadow",
  "golden",
  "light",
  "dark",
  "rose",
  "fire",
  "princess",
  "master",
  "king",
  "queen",
  "prince",
  "knight",
  "lord",
  "power",
  "magic",
  "super",
  "dream",
  "sun",
  "moon",
  "sky",
  "star",
  "phoenix",
  "cyber",
  "mega",
  "ultra",
  "diamond",
  "crystal",
  "royal",
  "metal",
  "ice",
  "ninja",
  "warrior",
  "hunter",
  "rider",
  "eagle",
  "hawk",
  "dragon",
  "lion",
  "tiger",
  "bear",
  "wolf",
  "fox",
  "cat",
  "dog",
  "monkey",
  "snake",
  "spirit",
  "soul",
  "ghost",
  "demon",
  "angel",
  "devil",
  "god",
  "heaven",
  "thunder",
  "storm",
  "lightning",
  "rain",
  "wind",
  "cloud",
  "snow",
  "winter",
  "spring",
  "summer",
  "autumn",
  "forest",
  "river",
  "ocean",
  "mountain",
  "valley",
  "happy",
  "lucky",
  "crazy",
  "wild",
  "free",
  "sweet",
  "cool",
  "hot",
  "fast",
  "speed",
  "quick",
  "swift",
  "flash",
  "sonic",
  "turbo",
  "hyper",
  "power",
  "force",
  "energy",
  "strong",
  "mighty",
  "brave",
  "bold",
  "fierce",
  "death",
  "dead",
  "life",
  "live",
  "forever",
  "eternal",
  "infinity",
  "endless",
  "secret",
  "mystery",
  "hidden",
  "shadow",
  "dark",
  "light",
  "bright",
  "shine",
  "metal",
  "steel",
  "iron",
  "gold",
  "silver",
  "bronze",
  "copper",
  "crystal",
  "ruby",
  "emerald",
  "sapphire",
  "diamond",
  "pearl",
  "jade",
  "stone",
  "rock",
  "master",
  "elite",
  "prime",
  "ultra",
  "mega",
  "supreme",
  "ultimate",
  "extreme",
  "hero",
  "legend",
  "myth",
  "ancient",
  "eternal",
  "cosmic",
  "chaos",
  "destiny",
  "victory",
  "winner",
  "champion",
  "warrior",
  "fighter",
  "soldier",
  "knight",
  "guard",
  "magic",
  "wizard",
  "witch",
  "spell",
  "mystic",
  "psychic",
  "dream",
  "wonder",
  "animal",
  "beast",
  "creature",
  "monster",
  "demon",
  "ghost",
  "spirit",
  "soul",
  "music",
  "song",
  "dance",
  "rock",
  "jazz",
  "blue",
  "rhythm",
  "beat",
  "game",
  "play",
  "sport",
  "team",
  "club",
  "league",
  "world",
  "global",
];

// Common Spanish words frequently used in passwords
const SPANISH_WORDS = [
  "agua",
  "aire",
  "alma",
  "amigo",
  "amor",
  "angel",
  "arbol",
  "arena",
  "arte",
  "ave",
  "azul",
  "baile",
  "banco",
  "barco",
  "beso",
  "blanco",
  "boca",
  "bosque",
  "brisa",
  "bruja",
  "bueno",
  "caballo",
  "calle",
  "calor",
  "campo",
  "casa",
  "cielo",
  "ciudad",
  "clase",
  "clave",
  "color",
  "comida",
  "coral",
  "corazon",
  "cruz",
  "cuento",
  "danza",
  "destino",
  "dia",
  "dolor",
  "dulce",
  "edad",
  "enero",
  "estrella",
  "feliz",
  "fiesta",
  "flor",
  "fondo",
  "fuego",
  "fuerza",
  "gato",
  "gente",
  "gloria",
  "gota",
  "gracia",
  "grande",
  "grupo",
  "guerra",
  "guia",
  "hada",
  "hielo",
  "hijo",
  "hoja",
  "hogar",
  "hora",
  "idea",
  "isla",
  "jardin",
  "juego",
  "lago",
  "largo",
  "latin",
  "letra",
  "libro",
  "lindo",
  "llama",
  "llave",
  "lluvia",
  "lobo",
  "logos",
  "luna",
  "luz",
  "madre",
  "magic",
  "manga",
  "mango",
  "mano",
  "mar",
  "marco",
  "marea",
  "mesa",
  "meta",
  "miel",
  "moda",
  "mono",
  "monte",
  "motor",
  "mural",
  "musa",
  "musica",
  "nieve",
  "nivel",
  "noble",
  "noche",
  "norte",
  "nota",
  "nueve",
  "nuevo",
  "obra",
  "ojo",
  "ola",
  "oro",
  "oso",
  "ostra",
  "padre",
  "pais",
  "papel",
  "paris",
  "paso",
  "pasta",
  "patio",
  "paz",
  "perla",
  "perro",
  "pez",
  "piano",
  "piel",
  "piedra",
  "plata",
  "playa",
  "plaza",
  "pluma",
  "poder",
  "poema",
  "poeta",
  "polen",
  "polo",
  "portal",
  "prisa",
  "radio",
  "rama",
  "rana",
  "rango",
  "rayo",
  "red",
  "reina",
  "reino",
  "reloj",
  "risa",
  "ritmo",
  "rio",
  "roca",
  "roma",
  "rosa",
  "rota",
  "rubio",
  "rueda",
  "rumbo",
  "sabio",
  "sal",
  "salsa",
  "santo",
  "seda",
  "serie",
  "sexto",
  "siglo",
  "signo",
  "silva",
  "sincro",
  "sitio",
  "sobre",
  "sol",
  "sonda",
  "sonia",
  "sonido",
  "sueÃ±o",
  "tabla",
  "tango",
  "tarde",
  "teatro",
  "tema",
  "tempo",
  "tesis",
  "texto",
  "tiempo",
  "tierra",
  "tigre",
  "toque",
  "torre",
  "total",
  "trama",
  "tren",
  "tres",
  "trust",
  "tunel",
  "uno",
  "usted",
  "valle",
  "valor",
  "vela",
  "venus",
  "verde",
  "verso",
  "viaje",
  "vida",
  "video",
  "villa",
  "vino",
  "viola",
  "virus",
  "vista",
  "vive",
  "vocal",
  "vuelo",
  "yoga",
  "zona",
];

const WORDS_BY_LANGUAGE = {
  en: ENGLISH_WORDS,
  es: SPANISH_WORDS,
} as const;

export function generatePassword(options: PasswordOptions): string {
  let chars = "";

  if (options.includeLowercase) chars += LOWERCASE_CHARS;
  if (options.includeUppercase) chars += UPPERCASE_CHARS;
  if (options.includeNumbers) chars += NUMBER_CHARS;
  if (options.includeSymbols) chars += SYMBOL_CHARS;

  if (options.excludeAmbiguous) {
    chars = chars
      .split("")
      .filter((char) => !AMBIGUOUS_CHARS.includes(char))
      .join("");
  }

  if (chars.length === 0) {
    throw new Error("At least one character set must be selected");
  }

  let password = "";
  const cryptoValues = new Uint32Array(options.length);
  crypto.getRandomValues(cryptoValues);

  for (let i = 0; i < options.length; i++) {
    password += chars[cryptoValues[i] % chars.length];
  }

  return password;
}

export function generateWordBasedPassword(options: PasswordOptions): string {
  const wordList = WORDS_BY_LANGUAGE[options.wordLanguage];
  const getRandomWord = () => {
    const cryptoValue = new Uint32Array(1);
    crypto.getRandomValues(cryptoValue);
    return wordList[cryptoValue[0] % wordList.length];
  };

  const capitalizeFirstLetter = (word: string) => {
    return word.charAt(0).toUpperCase() + word.slice(1);
  };

  const words = Array.from({ length: options.wordCount }, () =>
    capitalizeFirstLetter(getRandomWord())
  );

  if (options.includeNumbers) {
    const cryptoValue = new Uint32Array(1);
    crypto.getRandomValues(cryptoValue);
    words.push(((cryptoValue[0] % 900) + 100).toString());
  }

  return words.join(options.wordSeparator);
}

export function validatePasswordStrength(password: string): number {
  let strength = 0;

  if (password.length >= 12) strength += 2;
  if (password.match(/[a-z]/)) strength += 1;
  if (password.match(/[A-Z]/)) strength += 1;
  if (password.match(/[0-9]/)) strength += 1;
  if (password.match(/[^a-zA-Z0-9]/)) strength += 1;

  return Math.min(strength, 5);
}

export function calculatePasswordEntropy(password: string): number {
  const charSetSize = new Set(password).size;
  const passwordLength = password.length;
  return Math.round(passwordLength * (Math.log2(charSetSize) || 0));
}
